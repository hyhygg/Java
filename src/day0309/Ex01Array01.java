package day0309;
// 배열(Array)
// 배열이란, 여러개의 똑같은 데이터타입을 가지고 똑같은 목적을 가진 변수를 다룰 때
// 일일이 다 따로따로 만들어주는 것이 아니라
// 전부를 하나의 이름을 묶어주고 각각을 이름 대신 번호로 접근 하는 방식을 사용하는
// 데이터타입이다.

// 배열은 다음과 같이 선언과 초기화한다.
// 데이터타입[] 배열이름 = new 데이터타입[크기]

// 배열의 경우, 우리가 각각의 변수에 이름을 주는 방법이 아니고
// 대신 위치번호(=index) 라는 것을 사용하여
// "배열의 몇번째의 현재 값을 호출하라" 혹은
// "배열의 몇번째에 이 값을 초기화하라" 요런식으로 사용을 하게 된다.
// 단, 컴퓨터의 경우 순서를 셀 때에는 1부터 세지않고 0부터 세기 때문에
// 가능한 인덱스 범위는 0~크기-1 까지이다.

public class Ex01Array01 {
    public static void main(String[] args) {
        // 크기가 3인 int 배열을 만들어보자
        int[] array = new int[3];
        
        // 배열이 어떤 데이터타입의 배열인지에 따라서
        // 각 요소(element)의 값들이 결정된다.
        // 기본형 데이터타입의 배열일 경우, 모든 앨리먼트는 0으로 초기화가 된다.
        // 참조형 데이터타입의 배열일 경우, 모든 앨리먼트는 null로 초기화가 된다.
        
        // 널(null)
        // 널이란, 참조형 데이터타입에서만 발견되는 특수한 상태를 나타내는 값인데
        // 스택 영역에 메모리 값이 부여되여있지만, 힙 영역에 해당 공간은 초기화가 안되어있는 상태를
        // null 이라고 한다.
        // null 상태일때에는 아무런 것도 할 수 없다.
        // 예를 들어, 우리가 null 상태를 가진 String 객체의 equals() 메소드를 실행시킨다면?
        // String str = null;
        // str.equals("abc");
        
        // 1. 배열을 선언할 때 우리가 반드시 크기를 지정해주어야 되는데
        //    이때는 0 이상의 숫자가 크기에 들어가야 한다.
        //    또한, 변수 혹은 상수를 사용해서 크기를 지정해 줄 수도 있다.
        int size = 4;
        array = new int[size];
        
        // 2. 우리가 배열의 각 index를 통해서 해당 배열의 element를 접근하게 되는데,
        //    이때에는 index에 우리가 변수를 사용해줄 수도 있다.
        //    즉 for 문을 사용해서, array의 각 인덱스에 값을 넣거나 출력할 수도 있다.
        //    배열의 각 앨리먼트는 우리가 배열이름[해당 인덱스] 로 접근하게 된다.
        
        // for 문을 사용해서 array의 전체 내용을 출력해보자
        for(int i = 0; i < size; i++) {
            System.out.printf("array[%d]: %d\n", i, array[i]);      
        }
        
        // array 배열의 1번에 값을 넣어보자
        array[1] = 24;
        
        // index
        // index란, 순서를 가지고 있고 무언가를 모아둔 데이터타입에게는 모두 인덱스가 존재한다.
        // 즉 index란 순번과 같은 말이라고 생각하면 편하다.
        // 프로그래밍에서 index는 무조건 0에서 시작하고 해당 모음의 총 크기 - 1 이 마지막 인덱스가 된다.
        // 만약 유효하지 않은 index일 경우, ArrayIndexOutOfBoundsException이 발생하게 된다.
        
        // index에 -1을 넣으면?
        // System.out.println(array[-1]); -> 에러
        
        // index에 4를 넣으면?
        // System.out.println(array[4]); -> 에러
        
        // 단, 우리가 index는 최소값이 0이다 라는 것을 사용하여
        // 나중에 해당 배열에 어떤 앨리먼트의 인덱스가 얼마인지 찾을 때
        // 찾지 못하는 경우, -1을 나오게 해서, 그 앨리먼트는 해당 배열에 존재하지 않는다 를 나타나게 할 수도 있다!
            
    }
}
